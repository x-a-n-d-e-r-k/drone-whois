#!/usr/bin/python3
"""drone-whois

Usage:
    drone-whois [-k] [-u <username>] [-p <password>] [-U <url>] [-v] <id> <file>
    drone-whois --version
    drone-whois (-h | --help)

Options:
    -h --help       Show usage.
    --version       Show version.
    -v              Verbose output
    -k              Allow insecure SSL connections.
    -u <username>   Lair Username
    -p <password>   Lair Password
    -U <url>        Lair API URL

"""
import signal
import sys
import os
import re
from sys import exit
import urllib3
from ipaddress import ip_network,ip_address
from ipwhois import IPWhois, ASNRegistryError, HTTPLookupError
from docopt import docopt
from pylair import models,client
from pprint import pprint

def get_connection_details(args):
    conx = {}
    try:
        lair_url = os.environ['LAIR_API_SERVER']
        u = urllib3.util.parse_url(lair_url)
        conx['username'],conx['password'] = u.auth.split(":")
        conx['username'] = str(conx['username']).replace('%40','@')
        conx['scheme'] = u.scheme
        if u.port != None:
            conx['port'] = int(u.port)
        else:
            conx['port'] = 80
        if u.scheme == 'https' and u.port == None:
            conx['port'] = 443
    except KeyError as err:
        if args['-v']:
            print('get_connection_details error: {0}'.format(err))
        pass

    if args['-u']:
        conx['username'] = args['-u']
    if args['-p']:
        conx['password'] = args['-p']
    if args['-U']:
        url = urllib3.util.parse_url(args['-U'])
        conx['hostname'] = url.hostname
        if url.port != None:
            conx['port'] = int(url.port)
        else:
            cons['port'] = 80
        if url.scheme == 'https' and url.port == None:
            conx['port'] = 443
        conx['scheme'] = url.scheme
    return conx

def main():
    arguments = docopt(__doc__, version='drone-whois 2.0.0')
    conx_details = get_connection_details(arguments)
    if arguments['-v']:
        pprint(conx_details)

    project_id = arguments['<id>']
    project = dict(models.project)
    project['id'] = project_id
    project['commands'] = [{'command': 'ipwhois', 'tool': 'ipwhois'}]
    project['tool'] = 'drone-whois'

    opts = client.Options(conx_details['username'], 
                          conx_details['password'], 
                          conx_details['hostname'] + ":" + str(conx_details['port']), 
                          project_id, 
                          scheme=conx_details['scheme'],
                          insecure_skip_verify=arguments['-k'])

    lines = []
    cidrs = []
    error_count = 0
    try:
        lines = [line.rstrip('\n') for line in open(arguments['<file>'])]
    except IOError as e:
        print("Fatal: Could not open file. Error: ",e)
        exit(1)

    for line in sorted(set(lines)):
        try:
            IPs = list(ip_network(line))
        except AddrFormatError:
            print("Info: Skipping ",line,". Not an IP Address")
            continue
        for ip in IPs:
            o = IPWhois(str(ip))
            pprint(str(ip))
            try:
                results = o.lookup_rdap(asn_methods=['dns','whois','http'],depth=1)
            except ASNRegistryError as ase:
                print('Error: There was an exception thrown when looking up whois information for ',str(ip),': ',ase)
                continue
            except (TypeError,AttributeError,urllib3.exceptions.HTTPError,HTTPLookupError) as e:
                error_count += 1
                if error_count > 4:
                    print('Too many errors: Exiting...')
                    sys.exit(0)
                print('Error: Unknown exception: ',e)
                continue
            net=results['network']
            cidrs += net['cidr']
            netblock = dict(models.netblock)
            netblock['projectId'] = project_id
            netblock['asn'] = results['asn']
            netblock['asnCountryCode'] = results['asn_country_code']
            netblock['asnCidr'] = results['asn_cidr']
            netblock['asnDate'] = results['asn_date']
            netblock['asnRegistry'] = results['asn_registry']
            for obj in results['objects']:
                contact = results['objects'][obj]['contact']
                if contact is None:
                    continue
                if contact['email'] is not None:
                    for eml in contact['email']:
                        if netblock['techEmails'] is None:
                            netblock['techEmails'] = eml['value']
                        else:
                            netblock['techEmails'] += ',' + eml['value']
                if contact['address'] is not None:
                    for adr in contact['address']:
                        netblock['address'] = adr['value']
            netblock['cidr'] = net['cidr']
            netblock['name'] = net['name']
            if net['events'] is not None:
                for event in net['events']:
                    if event['action'] == 'registration':
                        netblock['created'] = event['timestamp']
                    if event['action'] == 'last changed':
                        netblock['updated'] = event['timestamp']
            netblock['description'] = results['asn_description']
            netblock['handle'] = net['handle']
            project['netblocks'].append(netblock)
            #if results['raw_referral'] is None:
            #    continue
            #ref = results['referral']
            #ref_raw = results['raw_referral']
            #netblock = dict(models.netblock)
            # netblock['cidr'] = ref['cidr'] Placeholder perhaps if bug is fixed.
            #reg = r'(network:IP-Network):(?P<val>.+?)\n'
            #pattern = re.compile(str(reg), re.DOTALL)
            #match = pattern.finditer(ref_raw)
            #for m in match:
            #    netblock['cidr'] = m.group('val').strip()
            #if 'name' in ref:
            #    netblock['name'] = ref['name']
            #if 'address' in ref:
            #    netblock['address'] = ref['address']
            #if 'city' in ref:
            #    netblock['city'] = ref['city']
            #if 'state' in ref:
            #    netblock['state'] = ref['state']
            #if 'country' in ref:
            #    netblock['country'] = ref['country']
            #if 'postal_code' in ref:
            #    netblock['postalCode'] = ref['postal_code']
            ## netblock['created'] = ref['created'] Placeholder
            #if 'updated' in ref:
            #    netblock['updated'] = ref['updated']
            #if 'description' in ref:
            #    netblock['description'] = ref['description']
            # netblock['handle'] = ref['handle'] Placeholder
            #project['netblocks'].append(netblock)

    res = client.import_project(project, opts)
    if res['status'] == 'Error':
        print("Fatal: ", res['message'])
        exit(1)
    print("Success: Operation completed successfully")

def signal_handler(sig, frame):
    sys.exit(0)

if __name__ == '__main__':
    try:
        signal.signal(signal.SIGINT, signal_handler)
        main()
    except KeyboardInterrupt:
        sys.exit(0)

